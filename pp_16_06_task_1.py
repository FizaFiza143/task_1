# -*- coding: utf-8 -*-
"""PP-16-06_TASK 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EI0QH-A1A2SzpLK5mLsUS4BpTPQ88OmT

##TASK _1


*   NAME: MOHSINA FAIZA NABA
*   ID: PP-16-06

##Project Title: "Personal Expense Tracker"
 Objective
 Develop a Python application that allows users to track and analyze their daily expenses using
 concepts learned in the course, including file handling, data structures, loops, NumPy, and
 Pandas.
 Project Tasks





 7. Using NumPy for Statistical Analysis
 ● UseNumPyto:
 ○ Calculate statistical measures like the highest, lowest, and average expense.
 ○ Identify spending trends (e.g., days with the highest and lowest expenses).

##1.User Input and Data Storage
 ● Allow users to input expense details through the console:
 ○ Fields: Date, Category (e.g., Food, Rent, Entertainment), Amount,
 Description.
 ● UseFile Handling to save the data in a CSV file.

# New Section
"""

import csv

def create_csv_with_headers(filename, headers):
    """Creates a CSV file with the specified headers."""
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(headers)

def add_expense_entry(filename):
    """Prompts the user to input expense details and appends them to the CSV file."""
    date = input("Enter date (YYYY-MM-DD): ")
    category = input("Enter category (e.g., Food, Rent, Entertainment): ")
    amount = float(input("Enter amount: "))
    description = input("Enter description: ")

    with open(filename, 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([date, category, amount, description])

    print("Expense entry added successfully!")

# Define headers and file name
headers = ['Date', 'Category', 'Amount', 'Description']
filename = 'tracker.csv'

# Create the CSV file with headers
create_csv_with_headers(filename, headers)

"""/content/drive/MyDrive/datasetpython/6_Personal_Expense_Tracker.csv"""

import csv

def include_data_from_file(filename, dataset_path):
    """Includes data from an existing dataset file into the tracker.csv file."""
    with open(dataset_path, 'r') as dataset_file, open(filename, 'a', newline='') as tracker_file:
        reader = csv.reader(dataset_file)
        writer = csv.writer(tracker_file)

        # Skip the header row in the dataset file if it exists
        next(reader, None)

        for row in reader:
            writer.writerow(row)

    print("Data from dataset file included successfully!")

# Define file name and dataset path
filename = 'tracker.csv'
dataset_path = '/content/drive/MyDrive/datasetpython/6_Personal_Expense_Tracker.csv'  # Replace with your dataset file path

# Include data from the dataset file
include_data_from_file(filename, dataset_path)

print("Dataset connected to tracker.csv successfully!")

import pandas as pd
df = pd.read_csv('tracker.csv')
df.head()

"""##2.Expense Summary and Analysis
 ● UsePandasto:
 ○ Readthestored expenses from the CSV file.
 ○ Groupexpenses by category and calculate total expenses for each.
 ○ Analyze monthly total expenses and average daily expenses.
"""

import pandas as pd

# 1. Read the stored expenses from the CSV file (already done)
df = pd.read_csv('tracker.csv')

# 2. Group expenses by category and calculate total expenses for each
category_expenses = df.groupby('Category')['Amount'].sum()

# 3. Analyze monthly total expenses
df['Date'] = pd.to_datetime(df['Date'])  # Convert 'Date' column to datetime
monthly_expenses = df.groupby(df['Date'].dt.month)['Amount'].sum()

# 4. Analyze average daily expenses
daily_expenses = df.groupby(df['Date'].dt.date)['Amount'].sum().mean()

# Display the results
print("Category-wise Expenses:\n", category_expenses)
print("\nMonthly Expenses:\n", monthly_expenses)
print("\nAverage Daily Expenses:", daily_expenses)

"""##3.Visualization
 ● UseMatplotlib or Pandas Visualization to:
 ○ Create a pie chart showing the percentage of expenses per category.
 ○ Plot abar chart of monthly expenses.
 ○ Generate a line graph of daily expenses for a selected month.
"""

import matplotlib.pyplot as plt
import pandas as pd

# 1. Pie chart of expenses per category
category_expenses = df.groupby('Category')['Amount'].sum()
category_expenses.plot.pie(autopct='%1.1f%%', startangle=90)
plt.title('Expense Distribution by Category')
plt.show()

# 2. Bar chart of monthly expenses
monthly_expenses = df.groupby(df['Date'].dt.month)['Amount'].sum()
monthly_expenses.plot.bar()
plt.title('Monthly Expenses')
plt.xlabel('Month')
plt.ylabel('Total Expenses')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Assuming df is your DataFrame

# 3. Line graph of daily expenses for a selected month (e.g., July)
selected_month = 7  # Change to the desired month

# Filter data for the selected month
filtered_df = df[df['Date'].dt.month == selected_month]

# Group by date and sum expenses
daily_expenses = filtered_df.groupby(filtered_df['Date'].dt.date)['Amount'].sum()

# Plot the line graph
daily_expenses.plot.line()
plt.title(f'Daily Expenses for Month {selected_month}')
plt.xlabel('Date')
plt.ylabel('Total Expenses')
plt.show()

"""## 4.Applying Functions and Logic
 ● Implement Functions for:
 ○ Adding a new expense entry.
 ○ Deleting an expense based on the entry ID or description.
 ○ Generating a summary report of total and category-wise expenses.
"""

import pandas as pd
import csv

def add_expense_entry(df):
    """Adds a new expense entry to the DataFrame."""
    date = input("Enter date (YYYY-MM-DD): ")
    category = input("Enter category (e.g., Food, Rent, Entertainment): ")
    amount = float(input("Enter amount: "))
    description = input("Enter description: ")
    new_entry = pd.DataFrame([[date, category, amount, description]], columns=df.columns)
    return pd.concat([df, new_entry], ignore_index=True)

def delete_expense_entry(df, entry_id=None, description=None):
    """Deletes an expense entry based on entry ID or description."""
    if entry_id:
        df = df.drop(index=entry_id)
    elif description:
        df = df[df['Description'] != description]
    return df

def generate_expense_summary(df):
    """Generates a summary report of total and category-wise expenses."""
    total_expenses = df['Amount'].sum()
    category_expenses = df.groupby('Category')['Amount'].sum()
    print(f"Total Expenses: {total_expenses}")
    print("\nCategory-wise Expenses:\n", category_expenses)

# Add an expense entry
df = add_expense_entry(df)

# Delete an expense entry by entry ID
df = delete_expense_entry(df, entry_id=2)  # Replace 2 with the actual entry ID

# Delete an expense entry by description
df = delete_expense_entry(df, description="Movie tickets")

# Generate an expense summary
generate_expense_summary(df)

df = add_expense_entry(df)  # Call the function to add data
df.tail()  # Display the last few rows of the DataFrame to see the new entry

"""##5.Advanced Features (Optional for Bonus Marks)
 ● Regular Expressions (RegEx):
 ○ Validate date inputs (e.g., YYYY-MM-DD format).
 ● Exception Handling:
 ○ Handle errors like invalid input (e.g., non-numeric amounts) or missing files.
● Keyword-Based Search:
 ○ Allow users to search for expenses based on keywords in the description.
"""

import re
import pandas as pd

def validate_date(date_str):
    """Validates date input using regular expressions."""
    pattern = r'^\d{4}-\d{2}-\d{2}$'  # YYYY-MM-DD format
    if re.match(pattern, date_str):
        return True
    else:
        raise ValueError("Invalid date format. Please use YYYY-MM-DD.")

def handle_invalid_input():
    """Handles invalid input errors."""
    while True:
        try:
            amount = float(input("Enter amount: "))
            return amount
        except ValueError:
            print("Invalid input. Please enter a numeric value.")

def keyword_search(df, keyword):
    """Searches for expenses based on keywords in the description."""
    filtered_df = df[df['Description'].str.contains(keyword, case=False)]
    return filtered_df

# Example usage within add_expense_entry function
def add_expense_entry(df):
    """Adds a new expense entry with validation and error handling."""
    while True:
        try:
            date = input("Enter date (YYYY-MM-DD): ")
            validate_date(date)  # Validate date format
            break
        except ValueError as e:
            print(e)

    category = input("Enter category (e.g., Food, Rent, Entertainment): ")
    amount = handle_invalid_input()  # Handle invalid amount input
    description = input("Enter description: ")
    new_entry = pd.DataFrame([[date, category, amount, description]], columns=df.columns)
    return pd.concat([df, new_entry], ignore_index=True)

# Example usage of keyword search
filtered_expenses = keyword_search(df, "groceries")
print(filtered_expenses)

"""##

##6.User Interaction
 ● Provide a menu-driven interface for the user to:
 ○ Addanewexpense.
 ○ Viewexpense summaries (daily, monthly, or category-wise).
 ○ Updateor delete an expense entry.
 ○ Export filtered data to a new CSV file.
"""

import pandas as pd

# ... (Your previous code for functions like add_expense_entry, etc.)

def main():
    df = pd.read_csv('tracker.csv')

    while True:
        print("\nExpense Tracker Menu:")
        print("1. Add Expense")
        print("2. View Summaries")
        print("3. Update/Delete")
        print("4. Export Data")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            df = add_expense_entry(df)
        elif choice == '2':
            # Implement view summaries logic here
            print("View Summaries - Under development")
        elif choice == '3':
            # Implement update/delete logic here
            print("Update/Delete - Under development")
        elif choice == '4':
            # Implement export data logic here
            print("Export Data - Under development")
        elif choice == '5':
            break
        else:
            print("Invalid choice. Try again.")

    df.to_csv('tracker.csv', index=False)

if __name__ == "__main__":
    main()

"""##7.Using NumPy for Statistical Analysis
 ● UseNumPyto:
 ○ Calculate statistical measures like the highest, lowest, and average expense.
 ○ Identify spending trends (e.g., days with the highest and lowest expenses).
"""

import pandas as pd
import numpy as np

# ... (Your previous code for functions like add_expense_entry, etc.)

def analyze_expenses_with_numpy(df):
    """Analyzes expenses using NumPy."""
    amounts = df['Amount'].to_numpy()

    highest_expense = np.max(amounts)
    lowest_expense = np.min(amounts)
    average_expense = np.mean(amounts)

    print(f"Highest Expense: {highest_expense}")
    print(f"Lowest Expense: {lowest_expense}")
    print(f"Average Expense: {average_expense}")

    # Identify spending trends (days with highest and lowest expenses)
    daily_expenses = df.groupby('Date')['Amount'].sum()
    highest_expense_day = daily_expenses.idxmax()
    lowest_expense_day = daily_expenses.idxmin()

    print(f"Day with Highest Expense: {highest_expense_day}")
    print(f"Day with Lowest Expense: {lowest_expense_day}")

# ... (Your main function)

# Call the analysis function after loading the data
df = pd.read_csv('tracker.csv')
analyze_expenses_with_numpy(df)